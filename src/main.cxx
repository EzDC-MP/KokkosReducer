// Enzo De Carvalho Bittencourt <ezdecarvalho@gmail.com>
// Error Free Transform reducer using Kahan Summation for Kokkos
#include <Kokkos_Core.hpp>
#include "KahanReducer.hpp"
#include <iostream>

int main(int argc, char* argv[]) 
{
  Kokkos::initialize(argc, argv);
  
  using Space = Kokkos::HostSpace; 

  printf("KahanReducer implementation\n");
  
  printf("\nScalarhilo EFT test\n--------------\n");
  {
    using Sfloat = Scalarhilo<float>;
    Sfloat a(1, 1e-35);
    Sfloat b(1e-34);

    printf("b.hi : %.e  b.lo : %.e\n", b.hi, b.lo);
    printf("a.hi : %.e  a.lo : %.e\n", a.hi, a.lo);
    a += b;
    printf("After summation : a.hi : %.e  a.lo : %.10e\n", a.hi, a.lo);
  } 
  /*
  printf("\nEquality test (sum 0...99)\n-----------\n");
  { 
    float resultStandard;
    float resultKahan;
    int N = 100;

    Kokkos::parallel_reduce("Normal Reduction :", N,
       KOKKOS_LAMBDA(const int i, float &val)
       {val += i;},
       Kokkos::Sum<float>(resultStandard));

    Kokkos::parallel_reduce("Kahan Reduction :", N,
      KOKKOS_LAMBDA(const int i, float &val)
      {val += i; printf("&val : %p, i :%i\n", &val, i);},
      KahanReducer<float,float,Space>(resultKahan));
  
    printf("&resultKahan : %p\n", &resultKahan);    
    printf("Results :\n\tNormal\t: %f\n\tKahan\t: %f\n", resultStandard, resultKahan);
  }
  */
  printf("\nEquality test (sum 0...99)\n-----------\n");
  {
    using Sfloat = Scalarhilo<float>;
    float resultStandard;
    Sfloat resultKahan;
    int N = 100;

    Kokkos::parallel_reduce("Normal Reduction :", N,
       KOKKOS_LAMBDA(const int i, float &val)
       {val += i;},
       Kokkos::Sum<float>(resultStandard));

    Kokkos::parallel_reduce("Kahan Reduction :", N,
      KOKKOS_LAMBDA(const int i, Sfloat &val)
      {val += i; },//printf("&val : %p, i :%i\n", &val, i);},
      Kokkos::Sum<Sfloat>(resultKahan));
  
    printf("Results :\n\tNormal\t: %.10e\n\tKahan\t: %.10e + %.10e = %.10e\n"
    , resultStandard, resultKahan.hi, resultKahan.lo, resultKahan.finalize());

  }

  printf("\nbad summation test\n-----------\n");
  {
    using Sfloat = Scalarhilo<float>;

    float resultStandard;
    Sfloat resultKahan;
    const int N = 255;
    const float list[N] = 
{
5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 
6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 
4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 
6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 
4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 
4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 
7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 
4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 
7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 
4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 
1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 
2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 
1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 
2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 
1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 
1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 
1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 
1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 
1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 
1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 
3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 
1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 
3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 
1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 
5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 
6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 
4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 
6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 
4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 
4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 
7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 
4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 
7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 
4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 
1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 
2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 
1.2207031250000000e-04, 1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 
2.6214400000000000e+05, 1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 
1.1920928955078125e-07, 1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 
1.6000000000000000e+01, 3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 
1.9531250000000000e-03, 1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 
1.6384000000000000e+04, 3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 
1.9073486328125000e-06, 1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 
1.0000000000000000e+00, 5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 
3.1250000000000000e-02, 6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 
1.0240000000000000e+03, 4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 
3.0517578125000000e-05, 6.5536000000000000e+04, 7.6293945312500000e-06, 2.6214400000000000e+05, 1.9073486328125000e-06, 
1.0485760000000000e+06, 4.7683715820312500e-07, 4.1943040000000000e+06, 1.1920928955078125e-07, 1.0000000000000000e+00, 
5.0000000000000000e-01, 4.0000000000000000e+00, 1.2500000000000000e-01, 1.6000000000000000e+01, 3.1250000000000000e-02, 
6.4000000000000000e+01, 7.8125000000000000e-03, 2.5600000000000000e+02, 1.9531250000000000e-03, 1.0240000000000000e+03, 
4.8828125000000000e-04, 4.0960000000000000e+03, 1.2207031250000000e-04, 1.6384000000000000e+04, 1.0000000000000000e+00
};

    /* This list was generated this way 
    for (int i=0; i < N; i++)
    {
      list[i] = (i % 2 == 0) ? pow(2, (i%24)) : pow(2, -(i%24));
      printf("%.16e, ", list[i]);
      if (!(i % 5)) {printf("\n");} 
    }*/
    
    printf("\n");
   
    Kokkos::parallel_reduce("Normal Reduction :", N,
       KOKKOS_LAMBDA(const int i, float &val)
       {val += list[i]*((i % 4) - 2);}, //add and substract stuff..
       Kokkos::Sum<float>(resultStandard));

    Kokkos::parallel_reduce("Kahan Reduction :", N,
      KOKKOS_LAMBDA(const int i, Sfloat &val)
      {val += list[i]*((i % 4) - 2);},//printf("&val : %p, i :%i\n", &val, i);},
      Kokkos::Sum<Sfloat>(resultKahan));
    
    printf("Results :\n\tNormal\t: %.10e\n\tKahan\t: %.10e + %.10e \n\t\t= %.10e\n"
    , resultStandard, resultKahan.hi, resultKahan.lo, resultKahan.finalize());
    
  }

  Kokkos::finalize();
}
